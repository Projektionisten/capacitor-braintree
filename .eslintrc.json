{
	"env": {
		"browser": true,
		"es2021": true
	},
	"parser": "@typescript-eslint/parser",
	"parserOptions": {
		"project": "tsconfig.json",
		"sourceType": "module"
	},
	"plugins": [
		"@typescript-eslint",
		"import",
		"prefer-arrow",
		"unused-imports",
		"jsdoc"
	],
	"rules": {
		"@typescript-eslint/explicit-member-accessibility": [
			"error",
			{
				"accessibility": "explicit",
				"overrides": {
				  "accessors": "explicit",
				  "constructors": "explicit",
				  "methods": "explicit",
				  "properties": "explicit",
				  "parameterProperties": "explicit"
				}
			  }
		],
		"@typescript-eslint/no-floating-promises": "error",
		"@typescript-eslint/consistent-type-imports": "error",
		"@typescript-eslint/no-unnecessary-condition": "error",
		"@typescript-eslint/array-type": [
			"error",
			{
				"default": "generic",
				"readonly": "generic"
			}
		],
		"@typescript-eslint/naming-convention": [
			"error",
			{
				"selector": "class",
				"format": [
					"PascalCase"
				]
			}
		],
		"@typescript-eslint/consistent-type-assertions": "error",
		"@typescript-eslint/no-explicit-any": [
			"warn",
			{
				"fixToUnknown": true
			}
		],
		"@typescript-eslint/indent": [
			"error",
			"tab"
		],
		"@typescript-eslint/member-ordering": [
			"error",
			{
				"classes": [
					// Index signature
					// No decorators for index signature.
					// Fields
					"public-decorated-field",
					"public-field",
					"private-decorated-field",
					"private-field",
					// Constructors
					// There are no decorators for constructors.
					"public-decorated-method",
					"protected-decorated-method",
					"private-decorated-method",
					"decorated-method" // = ["public-decorated-method", "protected-decorated-method", "private-decorated-method"]
				]
			}
		],
		"@typescript-eslint/no-empty-function": "error",
		"@typescript-eslint/no-empty-interface": "error",
		"@typescript-eslint/no-inferrable-types": "off",
		"@typescript-eslint/no-misused-new": "error",
		"@typescript-eslint/no-namespace": "off",
		"@typescript-eslint/no-var-requires": "error",
		"@typescript-eslint/prefer-for-of": "error",
		"@typescript-eslint/quotes": [
			"error",
			"single"
		],
		"@typescript-eslint/semi": [
			"error",
			"always"
		],
		"@typescript-eslint/type-annotation-spacing": "error",
		"@typescript-eslint/no-shadow": [
			"error",
			{
				"ignoreTypeValueShadow": true
			}
		],
		// requires braces in arrow functions for everything but a simple return
		"arrow-body-style": [
			"error",
			"as-needed"
		],
		// requires parantheses around function parameter e.g. (a) => {...}
		"arrow-parens": [
			"error",
			"always"
		],
		// we already generally use camelCase variable names, this just enforces that
		"camelcase": [
			"error",
			{
				"ignoreImports": true
			}
		],
		"comma-dangle": [
			"error",
			"never"
		],
		"complexity": "off",
		// requires switch() {} statements to include a default case
		"default-case": "error",
		"dot-notation": "off",
		"eol-last": "error",
		"eqeqeq": [
			"error",
			"always"
		],
		"guard-for-in": "off",
		"id-blacklist": [
			"error",
			"any",
			"Number",
			"number",
			"String",
			"string",
			"Boolean",
			"boolean"
		],
		"id-match": "error",
		"import/no-default-export": "error",
		"import/order": "warn",
		"keyword-spacing": [
			"error",
			{
				"before": true,
				"after": true
			}
		],
		"linebreak-style": [
			"error",
			"unix"
		],
		"max-len": [
			"error",
			{
				"ignorePattern": "^import [^,]+",
				"code": 150
			}
		],
		"new-parens": [
			"error",
			"always"
		],
		"no-bitwise": "error",
		"no-caller": "error",
		"no-cond-assign": "error",
		"no-debugger": "error",
		"no-empty": "error",
		"no-eval": "error",
		"no-fallthrough": "off",
		"no-magic-numbers": "off",
		"no-multiple-empty-lines": [
			"error",
			{
				"max": 1,
				"maxEOF": 1
			}
		],
		"no-new-wrappers": "error",
		"no-redeclare": "error",
		"no-throw-literal": "error",
		"no-trailing-spaces": "error",
		"no-undef-init": "error",
		"no-unsafe-finally": "error",
		"no-unused-expressions": "error",
		"no-unused-labels": "error",
		"no-var": "error",
		"one-var": [
			"error",
			"never"
		],
		"prefer-arrow/prefer-arrow-functions": "error",
		"prefer-const": "error",
		"quote-props": [
			"error",
			"consistent"
		],
		"radix": "off",
		"space-before-function-paren": [
			"error",
			"always"
		],
		"spaced-comment": "error",
		"template-curly-spacing": [
			"error",
			"never"
		],
		"use-isnan": "error",
		"unused-imports/no-unused-imports": "error",
		"unused-imports/no-unused-vars": [
			"warn",
			{
				"vars": "all",
				"varsIgnorePattern": "^_",
				"args": "after-used",
				"argsIgnorePattern": "^_"
			}
		],
		"jsdoc/check-alignment": "warn",
		"jsdoc/tag-lines": [
			"warn",
			"any",
			{
				"startLines": 1
			}
		],
		"jsdoc/require-jsdoc": [
			"error",
			{
				"checkConstructors": false,
				"require": {
					"FunctionDeclaration": true,
					"MethodDefinition": true,
					"ClassDeclaration": true,
					"ArrowFunctionExpression": false,
					"FunctionExpression": false
				}
			}
		],
		"no-multi-spaces": "error"
	}
}
